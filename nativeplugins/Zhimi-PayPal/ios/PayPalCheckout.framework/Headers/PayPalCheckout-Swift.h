// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AuthenticationServices;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import SafariServices;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PayPalCheckout",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIControl;

/// ActionClosureSleeve wraps a closure that takes a UIGestureRecognizer. The
/// instance is associated with the UIView when added and will be deallocated
/// when the associated object goes out of scope.
SWIFT_CLASS("_TtC14PayPalCheckout20ActionClosureWrapper")
@interface ActionClosureWrapper : NSObject
- (void)invoke:(UIControl * _Nonnull)sender;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSCoder;

SWIFT_CLASS("_TtC14PayPalCheckout9AddAction")
@interface AddAction : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayPalCheckout10AmountView")
@interface AmountView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


/// Encapsulates metadata after <code>CheckoutConfig.onApprove</code> is called.
/// This meta information can be utilized to properly capture an order.
SWIFT_CLASS_NAMED("Approval")
@interface PPCApproval : NSObject
/// Payer ID is also the user id associated with the transaction.
@property (nonatomic, readonly, copy) NSString * _Nonnull payerID;
/// The payment token associated with the order, also known as the order id.
@property (nonatomic, readonly, copy) NSString * _Nonnull ecToken;
/// Intent, this will be <code>CAPTURE</code> or <code>AUTHORIZE</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull intent;
/// Return URL can be used to redirect control back to the merchant
@property (nonatomic, readonly, copy) NSURL * _Nullable returnURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIImage;

SWIFT_CLASS("_TtC14PayPalCheckout20AspectRatioImageView")
@interface AspectRatioImageView : UIImageView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14PayPalCheckout10BackAction")
@interface BackAction : UIButton
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayPalCheckout21BrandedBackgroundView")
@interface BrandedBackgroundView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



@class UIEvent;

/// The <code>Carousel Cell</code> class hold the FI image and labels, notification label and
/// the preferred view
SWIFT_CLASS("_TtC14PayPalCheckout12CarouselCell")
@interface CarouselCell : UICollectionViewCell
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Re-setting the cells before they’re reused
- (void)prepareForReuse;
/// Custom HitTest has an additional check before the normal behavior to
/// check if this is something preferredView could handle despite being
/// outside of the cell’s bounds. This is necessary to do because the default
/// behavior does not allow for taps outside of the superview to be claimed
/// by subviews.
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewLayoutAttributes;
@class UICollectionViewLayoutInvalidationContext;

/// The <code>ZoomAndSnapFlowLayout</code> class informs the card
/// carousel collection on how to lay itself out. This file
/// dictates the collection view orientation, cell size, insets,
/// centerFI zoom factor
/// note:
/// You can have more than one layout, a different
/// flow needs to be created.
SWIFT_CLASS("_TtC14PayPalCheckout18CarouselFlowLayout")
@interface CarouselFlowLayout : UICollectionViewFlowLayout
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)prepareLayout;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)velocity SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewLayoutInvalidationContext * _Nonnull)invalidationContextForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
@end

@class UITraitCollection;
@class UICollectionView;
@class UIScrollView;

/// The carousel view denotes the primary wallet and funding instrument selection
/// component
SWIFT_CLASS("_TtC14PayPalCheckout12CarouselView")
@interface CarouselView : UIView <UICollectionViewDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (void)layoutSubviews;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// Cancel previous pending performs on this object and ensure that
/// <code>scrollViewDidEndScrollAnimation</code> is called. This also
/// ensures that <code>selectFIIfNeeded</code> is called if the user scrolls
/// and then drags their finger off the screen. The <code>ensureDelay</code>
/// is to simulate the same delay from <code>scrollViewDidEndDecelerating</code>.
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// This specific method detects when the scroll ends due to the following -
/// • When the user lifts their finger off the screen
/// • When the user drags their finger across and off the screen without lifting their finger
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
@end

@class PPCheckoutConfig;
@class ExtendedCheckoutConfig;
enum PPCPayMode : NSInteger;
enum PPCExperience : NSInteger;

/// todo:
/// finish these docs
SWIFT_CLASS_NAMED("Checkout")
@interface PPCheckout : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Supplied configuration; the global CheckoutConfig should be stored at any
/// given point on the <code>State</code> singleton. This convenience property defers to
/// that location
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PPCheckoutConfig * _Nullable config;)
+ (PPCheckoutConfig * _Nullable)config SWIFT_WARN_UNUSED_RESULT;
/// Shorthand for casting the config to an extended config
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ExtendedCheckoutConfig * _Nullable extendedConfig;)
+ (ExtendedCheckoutConfig * _Nullable)extendedConfig SWIFT_WARN_UNUSED_RESULT;
/// A state only true if the checkout config is verified
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL configVerified;)
+ (BOOL)configVerified SWIFT_WARN_UNUSED_RESULT;
/// The userAgent is used by analytics and other things
/// To signify the user agent in HTTP requests, to identify
/// and track the type of system, e.g.,
/// NativeCheckout/iphone7_3 iPhoneOS 12.4/MerchantApp/com.merchant.app
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userAgent;)
+ (NSString * _Nonnull)userAgent SWIFT_WARN_UNUSED_RESULT;
/// The cachePath is where all temporary files should be stored,
/// Preferably inside a subfolder. If this value is nil, the code must
/// be able to not having a cache folder.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nullable cachePath;)
+ (NSURL * _Nullable)cachePath SWIFT_WARN_UNUSED_RESULT;
/// Note: Session token is generated by the RTDBSessionTokenQuery that returns a PayPalSessionTokenResponse
/// Used for RTDB messages for authentication purposes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull sessionToken;)
+ (NSString * _Nonnull)sessionToken SWIFT_WARN_UNUSED_RESULT;
+ (void)setSessionToken:(NSString * _Nonnull)value;
/// Pay mode used for a checkout session (Continue, Pay Now)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum PPCPayMode payMode;)
+ (enum PPCPayMode)payMode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Reinitalizes the shared checkout with the new configuration.
/// Must be called at least once before SDK is used.
/// note:
/// The SDK will choose to ignore any non-vetted host apps’
/// <code>ExtendedCheckoutConfig</code> objects and instead use only the basic
/// configuration if the host app is not on the approved whitelist
/// \param config either an instance of <code>CheckoutConfig</code> or
/// <code>ExtendedCheckoutConfig</code>
///
+ (void)setConfig:(PPCheckoutConfig * _Nonnull)config;
/// This function invokes the UI experience for display. The hosting app may
/// call this but doing so before <code>set(config:)</code> results in an undefined
/// experience likely resulting in error.
/// \param experience one of the predefined experiences
///
+ (void)start:(enum PPCExperience)experience;
/// Will transition the UI to the finishing loading page <code>LoadingPage<Transition.Finishing>.id</code>.
+ (void)finishing;
/// This call is used when a user decides to logout. It will run the logout
/// and a light startup process that will allow the user to login with a new user.
+ (void)logout;
/// Allowing for calls of <code>SDK.shutdown()</code> to be invoked from anywhere, this
/// invokes the internal shutdownProcess.go() and runs through all the
/// shutdown steps in order.
/// \param fromWeb When we fallback to web and then shutdown,
/// we need to signal what shutdown flow we need.
///
+ (void)shutdownFromWeb:(BOOL)fromWeb completion:(void (^ _Nullable)(void))completion;
/// Allowing for calls of <code>SDK.error()</code> to be invoked from anywhere, this
/// invokes the internal errorProcess.go() and runs through all the
/// error steps in order.
+ (void)errorWithCompletion:(void (^ _Nullable)(void))completion;
@end

enum PPCEnvironment : NSInteger;
@class EnvironmentConfig;
@class PPCErrorInfo;
@class PPCShippingChange;
enum PPCShippingChangeState : NSInteger;
@class PPCShippingChangeError;
@class UIViewController;

/// Holds all the configuration values required by checkout experiences and
/// checkout flows. Modified and provided by the merchant, to start the checkout
/// flow desired.
SWIFT_CLASS_NAMED("CheckoutConfig")
@interface PPCheckoutConfig : NSObject <NSCopying>
/// The clientID is a value that application engineers can receive after registering their
/// application for use with PayPal’s services. Setup for this can be performed here:
/// https://developer.paypal.com/developer/applications/create
@property (nonatomic, copy) NSString * _Nonnull clientID;
/// The EC-Token or Pay-Token or Order ID. This token type is generated in various ways by
/// the merchant, in most cases, and sometimes by PayPal. Nonetheless, this token is required
/// on the base configuration for normal operation.
@property (nonatomic, copy) NSString * _Nullable payToken;
/// Two separate environments are usually set here, either .sandbox or .live; see <code>Environment</code>
/// documentation for more details on other environments
@property (nonatomic) enum PPCEnvironment environment;
/// If your app uses custom uriScheme’s as a redirect method, this should be specified here
@property (nonatomic, copy) NSString * _Nonnull uriScheme;
/// If your app uses universal links as a redirect method, this should be specified here
@property (nonatomic, copy) NSString * _Nonnull universalLink;
/// An object that allows us to tweak the knobs and levers of the  session to suit our development experience
@property (nonatomic, strong) EnvironmentConfig * _Nonnull environmentConfig;
@property (nonatomic, copy) void (^ _Nullable onAuthenticate)(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable));
/// Called when the authentication session needs to be passed from native to web
@property (nonatomic, copy) void (^ _Nullable onWebAuthenticate)(NSString * _Nullable, void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable));
/// Called when the transaction has been approved.
@property (nonatomic, copy) void (^ _Nullable onApprove)(PPCApproval * _Nonnull);
/// Called when the user has cancelled the transaction.
@property (nonatomic, copy) void (^ _Nullable onCancel)(void);
/// Called when an error cannot be recovered from, and the transaction has been cancelled
@property (nonatomic, copy) void (^ _Nullable onError)(PPCErrorInfo * _Nonnull);
/// Called if the user logs out. The transaction will allow the user to log in?
@property (nonatomic, copy) void (^ _Nullable onLogout)(void);
@property (nonatomic, copy) void (^ _Nullable onShippingChange)(PPCShippingChange * _Nonnull, void (^ _Nonnull)(enum PPCShippingChangeState, PPCShippingChangeError * _Nullable));
/// When the application needs to specify which view controller will be used
/// to present the SDK’s experience. Failing this, the root most view
/// controller currently being presented will be used.
@property (nonatomic, strong) UIViewController * _Nullable presentingViewController;
- (nonnull instancetype)initWithClientID:(NSString * _Nonnull)clientID payToken:(NSString * _Nonnull)payToken universalLink:(NSString * _Nonnull)universalLink uriScheme:(NSString * _Nonnull)uriScheme onApprove:(void (^ _Nonnull)(PPCApproval * _Nonnull))onApprove onCancel:(void (^ _Nonnull)(void))onCancel onError:(void (^ _Nonnull)(PPCErrorInfo * _Nonnull))onError environment:(enum PPCEnvironment)environment OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UITableView;
@class UITableViewCell;

/// Concrete implementation of the ContainerViewModel.
SWIFT_CLASS("_TtC14PayPalCheckout11ContainerVM")
@interface ContainerVM : NSObject
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Correlation IDs are debug IDs that the PayPal team uses to track issues.
SWIFT_CLASS_NAMED("CorrelationIDs")
@interface PPCCorrelationIDs : NSObject
/// Our correlation id associated when upgrading LSAT.
@property (nonatomic, readonly, copy) NSString * _Nullable lsatUpgradeDebugID;
/// Our correlation id associated when fetching user info.
@property (nonatomic, readonly, copy) NSString * _Nullable fetchPayloadDebugID;
/// Our correlation id associated when converting currency info.
@property (nonatomic, readonly, copy) NSString * _Nullable currencyConversionDebugID;
/// Our correlation id associated when finishing the checkout flow.
@property (nonatomic, readonly, copy) NSString * _Nullable finishCheckoutDebugID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14PayPalCheckout22UnconstrainedTextLabel")
@interface UnconstrainedTextLabel : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayPalCheckout27DeliverySelectionHeaderView")
@interface DeliverySelectionHeaderView : UnconstrainedTextLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayPalCheckout12DeliveryView")
@interface DeliveryView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, PPCEnvironment, "Environment", open) {
  PPCEnvironmentLive = 0,
  PPCEnvironmentSandbox = 1,
  PPCEnvironmentStage = 2,
};


/// A config that toggles shims in the code for development purposes.
SWIFT_CLASS("_TtC14PayPalCheckout17EnvironmentConfig")
@interface EnvironmentConfig : NSObject <NSCopying>
/// Toggle  eligibility check for stage or sandbox
/// The default true setting will check for eligibility while false will force
/// <code>State.isNativeEligible = true</code> and skip the actual network call
@property (nonatomic) BOOL checksEligibility;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Encapsulates metadata after <code>CheckoutConfig.onError</code> is called.
/// This meta information can be utilized to debug our checkout sessions.
SWIFT_CLASS_NAMED("ErrorInfo")
@interface PPCErrorInfo : NSObject
/// The error reason.
@property (nonatomic, readonly, copy) NSString * _Nullable reason;
/// Correlation IDs associated with debugging issues.
@property (nonatomic, readonly, strong) PPCCorrelationIDs * _Nonnull correlationIDs;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Definition of the various cases defining the multiple entry points in an enum
typedef SWIFT_ENUM_NAMED(NSInteger, PPCExperience, "Experience", open) {
/// The default native 3rd party host experience
  PPCExperienceNative = 0,
/// The hosted web view experience; still a native experience but the hosting app is
/// in a web view or Safari View Controller or the like
  PPCExperienceHostedWebView = 1,
};


/// This class should contain all the extended featurs privy to first party
/// or implicity trusted host applications. Those not explicity validated to
/// be on the whitelist for the PayPal iOS Checkout SDK will find that all
/// extended features in this class are ignored.
SWIFT_CLASS("_TtC14PayPalCheckout22ExtendedCheckoutConfig")
@interface ExtendedCheckoutConfig : PPCheckoutConfig
/// A  session ID generated from the Smart Payment
/// Button will be required to authenticate the Firebase App.
/// The sessionUID is retrieved from the merchant and
/// then used with PayPal’s GraphQL to generate a sessionToken.
@property (nonatomic, copy) NSString * _Nullable sessionUID;
/// The button session id associated with the merchant from SPB (web to app).
@property (nonatomic, copy) NSString * _Nullable buttonSessionID;
@property (nonatomic, copy) NSString * _Nullable pageUrl;
/// Indicates whether or not web fallbacks are supported
@property (nonatomic) BOOL supportsWebFallbacks;
/// Used to determine whether we’re using Firebase in the current lifecycle
@property (nonatomic, readonly) BOOL usesFirebase;
- (nonnull instancetype)initWithClientID:(NSString * _Nonnull)clientID payToken:(NSString * _Nonnull)payToken universalLink:(NSString * _Nonnull)universalLink uriScheme:(NSString * _Nonnull)uriScheme onApprove:(void (^ _Nonnull)(PPCApproval * _Nonnull))onApprove onCancel:(void (^ _Nonnull)(void))onCancel onError:(void (^ _Nonnull)(PPCErrorInfo * _Nonnull))onError environment:(enum PPCEnvironment)environment SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;

/// GestureClosureSleeve wraps a closure that takes a UIGestureRecognizer. The
/// instance is associated with the UIView when added and will be deallocated
/// when the associated object goes out of scope.
SWIFT_CLASS("_TtC14PayPalCheckout21GestureClosureWrapper")
@interface GestureClosureWrapper : NSObject
- (void)invoke:(UIGestureRecognizer * _Nonnull)sender;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14PayPalCheckout19HeaderSubTitleLabel")
@interface HeaderSubTitleLabel : UnconstrainedTextLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayPalCheckout16HeaderTitleLabel")
@interface HeaderTitleLabel : UnconstrainedTextLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayPalCheckout8Legalese")
@interface Legalese : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayPalCheckout13LogoImageView")
@interface LogoImageView : UIImageView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER;
@end





/// Pay mode used for a checkout session: currently Continue or Pay Now
typedef SWIFT_ENUM_NAMED(NSInteger, PPCPayMode, "PayMode", open) {
  PPCPayModeContinue = 0,
  PPCPayModePayNow = 1,
};

@class PPCPaymentButtonConfig;

/// The <code>PaymentButton</code> is utilized to provide a seamless integration for a checkout
/// experience similar to how the web handles PayPal checkout experiences.
SWIFT_CLASS_NAMED("PaymentButton")
@interface PPCPaymentButton : UIButton
/// <code>CheckoutConfig</code> initialization entry point.
- (void)setCheckoutConfig:(PPCheckoutConfig * _Nonnull)config;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (void)checkoutFinished;
/// Smart payment button configuration.
@property (nonatomic, readonly, strong) PPCPaymentButtonConfig * _Nonnull config;
@property (nonatomic) BOOL isLoading;
- (nonnull instancetype)initWithConfig:(PPCPaymentButtonConfig * _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

enum PPCPaymentButtonType : NSInteger;
enum PPCPaymentButtonEdges : NSInteger;
enum PPCPaymentButtonSize : NSInteger;

/// The implementation for our Smart Payment Button config
SWIFT_CLASS_NAMED("PaymentButtonConfig")
@interface PPCPaymentButtonConfig : NSObject
/// The button type, this determines what kind of button we want and there are various types.
/// This will affect the size, shape, and color of the button.
@property (nonatomic) enum PPCPaymentButtonType type;
/// The corners of the button and how they should be shaped.
@property (nonatomic) enum PPCPaymentButtonEdges edges;
/// The size enum determines how the button will be shown.
@property (nonatomic) enum PPCPaymentButtonSize size;
/// The prefix value on the smart payment button. For example “Pay with”
@property (nonatomic, copy) NSString * _Nonnull prefix;
/// The suffix value on the smart payment button. For example “Checkout”
@property (nonatomic, copy) NSString * _Nonnull suffix;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Edges for the smart payment button, these affect the corner radius.
typedef SWIFT_ENUM_NAMED(NSInteger, PPCPaymentButtonEdges, "PaymentButtonEdges", open) {
/// Hard edges on button with 0 corner radius.
  PPCPaymentButtonEdgesHardEdges = 0,
/// Soft edges with a corner radius of 4 pts.
  PPCPaymentButtonEdgesSoftEdges = 1,
/// Pill shaped corner radius.
  PPCPaymentButtonEdgesRounded = 2,
};

/// The size category which determines how the button is shown.
typedef SWIFT_ENUM_NAMED(NSInteger, PPCPaymentButtonSize, "PaymentButtonSize", open) {
/// Circle shaped button similar to a floating action button will show the monogram, if <code>.venmo</code> then will show <code>Venmo</code> logo.
  PPCPaymentButtonSizeMini = 0,
/// Collapsed will only show the wordmark.
  PPCPaymentButtonSizeCollapsed = 1,
/// Expanded shows the wordmark along with the suffix.
  PPCPaymentButtonSizeExpanded = 2,
/// Full will show the wordmark along with the prefix and suffix.
  PPCPaymentButtonSizeFull = 3,
};

/// The smart payment button type, this will adjust our images, colors, sizes, etc.
typedef SWIFT_ENUM_NAMED(NSInteger, PPCPaymentButtonType, "PaymentButtonType", open) {
/// The gold background and blue wordmark, monogram, and black text.
  PPCPaymentButtonTypePaypalGold = 0,
/// The white background and blue wordmark, monogram, and black text.
  PPCPaymentButtonTypePaypalWhite = 1,
/// The black background and monochrome wordmark, monogram, and white text.
  PPCPaymentButtonTypePaypalBlack = 2,
/// The blue background and white wordmark, blue monogram, and white text.
  PPCPaymentButtonTypePaypalBlue = 3,
/// The dark blue background with PayPal Credit wordmark and monogram.
  PPCPaymentButtonTypePaypalCredit = 4,
/// The blue background, with Venmo logo.
  PPCPaymentButtonTypeVenmo = 5,
};


SWIFT_CLASS("_TtC14PayPalCheckout21PaysheetContainerCell")
@interface PaysheetContainerCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITouch;
@class ASWebAuthenticationSession;

/// note:
/// Needs comments
SWIFT_CLASS("_TtC14PayPalCheckout22PaysheetViewController")
@interface PaysheetViewController : UIViewController <ASWebAuthenticationPresentationContextProviding, UIGestureRecognizerDelegate>
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)dismissViewControllerAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (ASPresentationAnchor _Nonnull)presentationAnchorForWebAuthenticationSession:(ASWebAuthenticationSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=13);
/// Interface orientation overrides to force portrait
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@end


SWIFT_CLASS("_TtC14PayPalCheckout18ProfileImageBubble")
@interface ProfileImageBubble : UIImageView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14PayPalCheckout26RateChangePolicyHeaderView")
@interface RateChangePolicyHeaderView : UnconstrainedTextLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayPalCheckout14RateChangeView")
@interface RateChangeView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14PayPalCheckout34SeventyTwoHourConversionHeaderView")
@interface SeventyTwoHourConversionHeaderView : UnconstrainedTextLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ShippingAmount")
@interface PPCShippingAmount : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull currencyValue;
@property (nonatomic, readonly, copy) NSString * _Nonnull currencySymbol;
@property (nonatomic, readonly, copy) NSString * _Nonnull currencyFormat;
@property (nonatomic, readonly, copy) NSString * _Nonnull currencyFormatSymbolISOCurrency;
@property (nonatomic, readonly, copy) NSString * _Nonnull currencyCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PPCShippingChangeAddress;
@class PPCShippingMethod;

SWIFT_CLASS_NAMED("ShippingChange")
@interface PPCShippingChange : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull payToken;
@property (nonatomic, readonly, strong) PPCShippingChangeAddress * _Nonnull shippingAddress;
@property (nonatomic, readonly, copy) NSString * _Nullable paymentID;
@property (nonatomic, readonly, copy) NSString * _Nullable billingToken;
@property (nonatomic, readonly, strong) PPCShippingMethod * _Nullable selectedShippingMethod;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ShippingChangeAddress")
@interface PPCShippingChangeAddress : NSObject
@property (nonatomic) BOOL isPrimary;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL isDefault;
@property (nonatomic) BOOL isDisabled;
@property (nonatomic) BOOL isInvalid;
@property (nonatomic, copy) NSString * _Nonnull fullAddress;
@property (nonatomic, copy) NSString * _Nullable addressID;
@property (nonatomic, copy) NSString * _Nullable fullName;
@property (nonatomic, copy) NSString * _Nullable line1;
@property (nonatomic, copy) NSString * _Nullable line2;
@property (nonatomic, copy) NSString * _Nullable city;
@property (nonatomic, copy) NSString * _Nullable state;
@property (nonatomic, copy) NSString * _Nullable postalCode;
@property (nonatomic, copy) NSString * _Nullable country;
- (nonnull instancetype)initWithIsPrimary:(BOOL)isPrimary isSelected:(BOOL)isSelected isDefault:(BOOL)isDefault isDisabled:(BOOL)isDisabled isInvalid:(BOOL)isInvalid fullAddress:(NSString * _Nonnull)fullAddress country:(NSString * _Nullable)country addressID:(NSString * _Nullable)addressID fullName:(NSString * _Nullable)fullName line1:(NSString * _Nullable)line1 line2:(NSString * _Nullable)line2 city:(NSString * _Nullable)city state:(NSString * _Nullable)state postalCode:(NSString * _Nullable)postalCode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ShippingChangeError")
@interface PPCShippingChangeError : NSError
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end

/// This class is responsible for letting our SDK know about the state of shipping changes.
typedef SWIFT_ENUM_NAMED(NSInteger, PPCShippingChangeState, "ShippingChangeState", open) {
/// The shipping callback is currently processing the change.
  PPCShippingChangeStateProcessing = 0,
/// The shipping change was approved.
  PPCShippingChangeStateApproved = 1,
/// The shipping change was rejected and not allowed.
  PPCShippingChangeStateRejected = 2,
/// The shipping change was cancelled.
  PPCShippingChangeStateCancelled = 3,
/// The shipping change had an error.
  PPCShippingChangeStateError = 4,
/// The shipping callback has not been called
  PPCShippingChangeStateUndetermined = 5,
};


SWIFT_CLASS("_TtC14PayPalCheckout21ShippingContainerView")
@interface ShippingContainerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end

enum PPCShippingType : NSInteger;

SWIFT_CLASS_NAMED("ShippingMethod")
@interface PPCShippingMethod : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
@property (nonatomic, readonly) BOOL selected;
@property (nonatomic, readonly) enum PPCShippingType type;
@property (nonatomic, readonly, strong) PPCShippingAmount * _Nullable amount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, PPCShippingType, "ShippingType", open) {
  PPCShippingTypeShipping = 0,
  PPCShippingTypePickup = 1,
  PPCShippingTypeUnknown = 2,
};


SWIFT_CLASS("_TtC14PayPalCheckout12ShippingView")
@interface ShippingView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14PayPalCheckout15TransitionLabel")
@interface TransitionLabel : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@end






@interface UIColor (SWIFT_EXTENSION(PayPalCheckout))
/// Returns self on iOS 13 and later. For older iOS versions returns self for Regular Contrast mode or a specific color for Increased Contrast mode if it’s defined either for this color or for one of its ancestors.
@property (nonatomic, readonly, strong) UIColor * _Nonnull current;
/// UIColor parameters to specify light and dark colors for defult components, such as labels. If the userInterfaceStyle is Dark, then the component will automatically switch to Dark colors. If no dark colors are specified, then the component will default to the Light color. Similarly, if accessibilityContrast is High and userInterfaceLevel is Elevated, then the respective colors for those will be used
- (nonnull instancetype)initWithLight:(UIColor * _Nonnull)light lightHighContrast:(UIColor * _Nullable)lightHighContrast lightElevated:(UIColor * _Nullable)lightElevated lightElevatedHighContrast:(UIColor * _Nullable)lightElevatedHighContrast dark:(UIColor * _Nullable)dark darkHighContrast:(UIColor * _Nullable)darkHighContrast darkElevated:(UIColor * _Nullable)darkElevated darkElevatedHighContrast:(UIColor * _Nullable)darkElevatedHighContrast;
@end


































@class SFSafariViewController;

SWIFT_CLASS("_TtC14PayPalCheckout19WebExperienceRouter")
@interface WebExperienceRouter : NSObject <SFSafariViewControllerDelegate>
- (void)safariViewController:(SFSafariViewController * _Nonnull)controller didCompleteInitialLoad:(BOOL)didLoadSuccessfully;
- (void)safariViewController:(SFSafariViewController * _Nonnull)controller initialLoadDidRedirectToURL:(NSURL * _Nonnull)URL;
- (void)safariViewControllerDidFinish:(SFSafariViewController * _Nonnull)controller;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
